{"version":3,"file":"static/js/587.431234d7.chunk.js","mappings":"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","sources":["components/three/models/Planet.jsx","components/three/models/UFO.jsx","components/three/models/Stars.jsx","components/three/SpaceScene.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { useFrame, useLoader } from \"@react-three/fiber\";\nimport { TextureLoader } from \"three\";\nimport { Sphere } from \"@react-three/drei\";\n\nconst Planet = ({ position }) => {\n  const planetRef = useRef();\n  const ringsRef = useRef();\n  const atmosphereRef = useRef();\n\n  // Load planet textures\n  const [marsTexture, marsNormalMap, marsRoughnessMap] = useLoader(\n    TextureLoader,\n    [\n      `${process.env.PUBLIC_URL}/textures/mars/mars_texture.jpg`,\n      `${process.env.PUBLIC_URL}/textures/mars/mars_normal.jpg`,\n      `${process.env.PUBLIC_URL}/textures/mars/mars_roughness.jpg`,\n    ]\n  );\n\n  useFrame(({ clock }) => {\n    const elapsedTime = clock.getElapsedTime();\n\n    // Rotate planet\n    if (planetRef.current) {\n      planetRef.current.rotation.y = elapsedTime * 0.1;\n    }\n\n    // Rotate rings\n    if (ringsRef.current) {\n      ringsRef.current.rotation.z = elapsedTime * 0.05;\n    }\n\n    // Pulse atmosphere\n    if (atmosphereRef.current) {\n      atmosphereRef.current.scale.set(\n        1 + Math.sin(elapsedTime) * 0.01,\n        1 + Math.sin(elapsedTime) * 0.01,\n        1 + Math.sin(elapsedTime) * 0.01\n      );\n    }\n  });\n\n  return (\n    <group position={position}>\n      {/* Main Planet */}\n      <mesh ref={planetRef}>\n        <sphereGeometry args={[3, 64, 64]} />\n        <meshStandardMaterial\n          map={marsTexture}\n          normalMap={marsNormalMap}\n          roughnessMap={marsRoughnessMap}\n          metalness={0.2}\n          roughness={0.8}\n        />\n      </mesh>\n\n      {/* Atmosphere */}\n      <mesh ref={atmosphereRef} scale={[1.1, 1.1, 1.1]}>\n        <sphereGeometry args={[3, 64, 64]} />\n        <meshStandardMaterial\n          color=\"#ff4e50\"\n          transparent\n          opacity={0.1}\n          side={2}\n        />\n      </mesh>\n    </group>\n  );\n};\n\nexport default Planet;\n","// src/components/three/models/UFO.jsx\nimport React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Torus, Cylinder, SpotLight } from \"@react-three/drei\";\n\nconst UFO = () => {\n  const ufoRef = useRef();\n  const glowRef = useRef();\n  const lightRingRef = useRef();\n\n  useFrame(({ clock }) => {\n    const t = clock.getElapsedTime();\n\n    if (ufoRef.current) {\n      // Orbital movement\n      ufoRef.current.position.x = Math.sin(t * 0.3) * 10;\n      ufoRef.current.position.z = Math.cos(t * 0.3) * 10;\n      ufoRef.current.position.y = Math.sin(t * 0.5) * 2; // Hovering effect\n\n      // UFO rotation\n      ufoRef.current.rotation.y = -t * 0.3;\n      ufoRef.current.rotation.z = Math.sin(t * 0.5) * 0.1;\n    }\n\n    // Animate glow\n    if (glowRef.current) {\n      glowRef.current.intensity = 1 + Math.sin(t * 5) * 0.3;\n    }\n\n    // Rotate light ring\n    if (lightRingRef.current) {\n      lightRingRef.current.rotation.y = t * 2;\n    }\n  });\n\n  return (\n    <group ref={ufoRef}>\n      {/* Main body - saucer shape */}\n      <group>\n        {/* Top dome */}\n        <mesh position={[0, 0.3, 0]}>\n          <sphereGeometry\n            args={[0.4, 32, 32, 0, Math.PI * 2, 0, Math.PI / 2]}\n          />\n          <meshPhysicalMaterial\n            color=\"white\"\n            metalness={0.8}\n            roughness={0.2}\n            clearcoat={0.5}\n          />\n        </mesh>\n\n        {/* Main disc */}\n        <Torus args={[0.8, 0.3, 32, 32]} rotation={[Math.PI / 2, 0, 0]}>\n          <meshPhysicalMaterial\n            color=\"light blue\"\n            metalness={0.8}\n            roughness={0.2}\n            clearcoat={0.5}\n          />\n        </Torus>\n\n        {/* Bottom glow ring */}\n        <group ref={lightRingRef}>\n          {Array.from({ length: 8 }).map((_, i) => (\n            <mesh\n              key={i}\n              position={[\n                Math.cos((i / 8) * Math.PI * 2) * 0.6,\n                -0.2,\n                Math.sin((i / 8) * Math.PI * 2) * 0.6,\n              ]}\n            >\n              <sphereGeometry args={[0.1, 16, 16]} />\n              <meshBasicMaterial color=\"#64ffda\" />\n            </mesh>\n          ))}\n        </group>\n\n        {/* Center bottom light */}\n        <mesh position={[0, -0.2, 0]}>\n          <cylinderGeometry args={[0.2, 0.2, 0.1, 32]} />\n          <meshBasicMaterial color=\"#64ffda\" opacity={0.8} transparent />\n        </mesh>\n\n       \n      </group>\n\n      {/* Light beam */}\n      <SpotLight\n        ref={glowRef}\n        position={[0, 0, 0]}\n        angle={0.3}\n        penumbra={0.5}\n        intensity={1}\n        color=\"#64ffda\"\n        distance={10}\n      />\n    </group>\n  );\n};\n\nexport default UFO;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\n\nconst CustomStars = () => {\n  const starsRef = useRef();\n  const starGeometry = new THREE.BufferGeometry();\n  const starMaterial = new THREE.PointsMaterial({\n    color: \"#ffffff\",\n    size: 0.1,\n    transparent: true,\n    opacity: 0.8,\n    sizeAttenuation: true,\n  });\n\n  // Create more stars for better effect\n  const starVertices = [];\n  for (let i = 0; i < 15000; i++) {\n    const x = (Math.random() - 0.5) * 2000;\n    const y = (Math.random() - 0.5) * 2000;\n    const z = -Math.random() * 2000;\n    starVertices.push(x, y, z);\n  }\n\n  starGeometry.setAttribute(\n    \"position\",\n    new THREE.Float32BufferAttribute(starVertices, 3)\n  );\n\n  useFrame((state) => {\n    starsRef.current.rotation.z += 0.0001;\n\n    // Add subtle pulsing effect\n    const time = state.clock.getElapsedTime();\n    starsRef.current.material.size = 0.1 + Math.sin(time) * 0.02;\n  });\n\n  return (\n    <points ref={starsRef} geometry={starGeometry} material={starMaterial} />\n  );\n};\n\nexport default CustomStars;\n","import React, { Suspense } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Stars, OrbitControls } from \"@react-three/drei\";\nimport Planet from \"./models/Planet\";\nimport UFO from \"./models/UFO\";\nimport CustomStars from \"./models/Stars\";\n\nconst SpaceScene = () => {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100vh\",\n        background: \"linear-gradient(to bottom, #0f0c29, #302b63, #24243e)\",\n        zIndex: 0,\n      }}\n    >\n      <Canvas\n        camera={{ position: [0, 0, 15], fov: 75 }}\n        gl={{ antialias: true }}\n      >\n        <color attach=\"background\" args={[\"#0f0c29\"]} />\n        <fog attach=\"fog\" args={[\"#0f0c29\", 15, 25]} />\n\n        <OrbitControls\n          enableZoom={false}\n          enablePan={false}\n          enableRotate={true}\n          rotateSpeed={0.5}\n          maxPolarAngle={Math.PI / 2}\n          minPolarAngle={Math.PI / 2}\n        />\n\n        {/* Main lighting */}\n        <ambientLight intensity={0.4} />\n        <directionalLight position={[5, 5, 5]} intensity={1} castShadow />\n        <pointLight\n          position={[-10, -10, -10]}\n          intensity={0.5}\n          color=\"#64ffda\"\n        />\n        <pointLight position={[10, 10, 10]} intensity={0.8} color=\"#6e6aff\" />\n\n        {/* Stars background */}\n        <Stars\n          radius={100}\n          depth={50}\n          count={5000}\n          factor={4}\n          saturation={0}\n          fade={true}\n        />\n        <CustomStars />\n\n        {/* Main content */}\n        <Suspense fallback={null}>\n          <Planet position={[0, 0, 0]} />\n          <UFO />\n        </Suspense>\n      </Canvas>\n    </div>\n  );\n};\n\nexport default SpaceScene;\n"],"names":["_ref","position","planetRef","useRef","ringsRef","atmosphereRef","marsTexture","marsNormalMap","marsRoughnessMap","useLoader","TextureLoader","concat","process","useFrame","_ref2","clock","elapsedTime","getElapsedTime","current","rotation","y","z","scale","set","Math","sin","_jsxs","children","ref","_jsx","args","map","normalMap","roughnessMap","metalness","roughness","color","transparent","opacity","side","UFO","ufoRef","glowRef","lightRingRef","t","x","cos","intensity","PI","clearcoat","Torus","Array","from","length","_","i","SpotLight","angle","penumbra","distance","CustomStars","starsRef","starGeometry","THREE","starMaterial","size","sizeAttenuation","starVertices","random","push","setAttribute","state","time","material","geometry","SpaceScene","style","top","left","width","height","background","zIndex","Canvas","camera","fov","gl","antialias","attach","OrbitControls","enableZoom","enablePan","enableRotate","rotateSpeed","maxPolarAngle","minPolarAngle","castShadow","Stars","radius","depth","count","factor","saturation","fade","Suspense","fallback","Planet"],"sourceRoot":""}